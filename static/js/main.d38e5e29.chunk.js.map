{"version":3,"sources":["types/FilteringType.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","services/getTodos.ts","index.tsx"],"names":["FilteringType","TodoList","filtering","todos","filter","title","iconId","setIsModalOpen","setTodoCard","setIconId","active","todo","completed","findMatches","trim","toLowerCase","includes","handleEyeButton","id","className","length","map","todoItem","type","onClick","TodoFilter","input","setInput","selectedButton","setSelectedButton","value","onChange","target","handleSelect","all","e","handleInput","placeholder","style","pointerEvents","Loader","TodoModal","todoCard","useState","selectedUser","setsSelectedUser","isUserLoad","setIsUserLoad","useEffect","setTimeout","fetch","userId","then","response","json","user","finally","href","email","name","App","setTodos","todosLoading","setTodosLoading","setFilter","setTitle","isModalOpen","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d38e5e29.chunk.js","sourcesContent":["export enum FilteringType {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n","import React, { SetStateAction } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { FilteringType } from '../../types/FilteringType';\n\ntype Props = {\n  todos: Todo[]\n  filter: FilteringType\n  title: string,\n  iconId: number,\n  setIsModalOpen: React.Dispatch<SetStateAction<boolean>>,\n  setTodoCard: React.Dispatch<SetStateAction<Todo | undefined>>,\n  setIconId: React.Dispatch<SetStateAction<number>>\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  filter,\n  title,\n  iconId,\n  setIsModalOpen,\n  setTodoCard,\n  setIconId,\n}) => {\n  let filtering;\n\n  switch (filter) {\n    case FilteringType.active:\n      filtering = todos.filter((todo) => !todo.completed);\n      break;\n    case FilteringType.completed:\n      filtering = todos.filter((todo) => todo.completed);\n      break;\n    default: filtering = todos;\n  }\n\n  const findMatches = filtering\n    .filter((todo) => todo.title.trim().toLowerCase()\n      .includes(title.trim().toLowerCase()));\n\n  const handleEyeButton = (todo: Todo) => {\n    setTodoCard(todo);\n    setIsModalOpen(true);\n    setIconId(todo.id);\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {title.trim().length > 0 ? (\n          findMatches.map((todoItem) => (\n            <tr\n              data-cy=\"todo\"\n              className=\"\"\n              key={todoItem.id}\n            >\n              <td className=\"is-vcentered\">{todoItem.id}</td>\n              <td className=\"is-vcentered\">\n                {todoItem.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={todoItem.completed\n                    ? 'has-text-success' : 'has-text-danger'}\n                >\n                  {todoItem.title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => handleEyeButton(todoItem)}\n                >\n                  <span className=\"icon\">\n                    <i className={`far ${todoItem.id !== iconId ? 'fa-eye' : 'fa-eye-slash'}`} />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))\n        ) : (\n\n          filtering.map((todoItem) => (\n            <tr\n              data-cy=\"todo\"\n              className=\"\"\n              key={todoItem.id}\n            >\n              <td className=\"is-vcentered\">{todoItem.id}</td>\n              <td className=\"is-vcentered\">\n                {todoItem.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={todoItem.completed\n                    ? 'has-text-success' : 'has-text-danger'}\n                >\n                  {todoItem.title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => handleEyeButton(todoItem)}\n                >\n                  <span className=\"icon\">\n                    <i className={`far ${todoItem.id !== iconId ? 'fa-eye' : 'fa-eye-slash'}`} />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))\n        )}\n\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { FilteringType } from '../../types/FilteringType';\n\ninterface Props {\n  input: string\n  setInput: React.Dispatch<React.SetStateAction<string>>\n  selectedButton: string\n  setSelectedButton: React.Dispatch<React.SetStateAction<FilteringType>>\n}\n\nexport const TodoFilter: React.FC<Props> = ({\n  input,\n  setInput,\n  selectedButton,\n  setSelectedButton,\n}) => {\n  function handleInput(e: React.BaseSyntheticEvent) {\n    setInput(e.target.value);\n  }\n\n  const handleSelect = (value: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedButton(value.target.value as FilteringType);\n  };\n\n  const handleDeleteButton = () => {\n    setInput('');\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            value={selectedButton}\n            onChange={(value) => handleSelect(value)}\n            data-cy=\"statusSelect\"\n          >\n            <option value={FilteringType.all}>All</option>\n            <option value={FilteringType.active}>Active</option>\n            <option value={FilteringType.completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          value={input}\n          onChange={(e) => handleInput(e)}\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {input.trim() && (\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleDeleteButton}\n            >\n              .\n            </button>\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect, SetStateAction } from 'react';\n// import { getUsers } from '../../services/getUsers';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\nimport { Loader } from '../Loader/Loader';\n\ninterface Props {\n  todoCard: Todo | undefined;\n  setIsModalOpen: React.Dispatch<SetStateAction<boolean>>\n  setIconId: React.Dispatch<SetStateAction<number>>\n}\n\nexport const TodoModal: React.FC<Props> = ({\n  todoCard,\n  setIsModalOpen,\n  setIconId,\n}) => {\n  const [selectedUser, setsSelectedUser] = useState<User>();\n  const [isUserLoad, setIsUserLoad] = useState(false);\n\n  useEffect(() => {\n    setIsUserLoad(true);\n    setTimeout(() => {\n      return fetch('https://mate-academy.github.io/'\n        + `react_dynamic-list-of-todos/api/users/${todoCard?.userId}.json`)\n        .then((response) => {\n          return response.json();\n        }).then((user) => {\n          setsSelectedUser(user);\n        }).finally(() => setIsUserLoad(false));\n    }, 300);\n  }, [todoCard]);\n\n  const handleCloseCard = () => {\n    setIsModalOpen(false);\n    setIconId(0);\n  };\n\n  return (\n\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {isUserLoad ? (\n        <>\n          <Loader />\n        </>\n\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {todoCard?.id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleCloseCard}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todoCard?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n              {todoCard?.completed ? (\n                <strong\n                  className=\"has-text-success\"\n                >\n                  Done\n                </strong>\n              ) : (\n                <strong\n                  className=\"has-text-danger\"\n                >\n                  Planned\n                </strong>\n              )}\n\n              {' by '}\n              <a key={todoCard?.userId} href={`mailto:${selectedUser?.email}`}>\n                {selectedUser?.name}\n              </a>\n\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './services/getTodos';\nimport { FilteringType } from './types/FilteringType';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [todosLoading, setTodosLoading] = useState(false);\n  const [filter, setFilter] = useState<FilteringType>(FilteringType.all);\n  const [title, setTitle] = useState('');\n  const [todoCard, setTodoCard] = useState<Todo>();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [iconId, setIconId] = useState(0);\n\n  useEffect(() => {\n    setTodosLoading(true);\n    setTimeout(() => {\n      getTodos().then((todo) => {\n        setTodos(todo);\n      })\n        .finally(() => setTodosLoading(false));\n    }, 300);\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                input={title}\n                setInput={setTitle}\n                selectedButton={filter}\n                setSelectedButton={setFilter}\n              />\n            </div>\n\n            <div className=\"block\">\n              {todosLoading && (\n                <Loader />\n              )}\n              {!todosLoading && todos.length > 0 && (\n                <TodoList\n                  title={title}\n                  todos={todos}\n                  filter={filter}\n                  iconId={iconId}\n                  setIsModalOpen={setIsModalOpen}\n                  setTodoCard={setTodoCard}\n                  setIconId={setIconId}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {isModalOpen && (\n        <TodoModal\n          todoCard={todoCard}\n          setIsModalOpen={setIsModalOpen}\n          setIconId={setIconId}\n        />\n      )}\n\n    </>\n  );\n};\n","export function getTodos() {\n  return fetch('https://mate-academy.github.io/'\n  + 'react_dynamic-list-of-todos/api/todos.json')\n    .then((response) => {\n      return response.json();\n    });\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}